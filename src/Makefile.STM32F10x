# on debian systems install:
# apt-get install openocd gcc-arm-none-eabi binutils-arm-none-eabi
#
# Please, check if your STLINKv2 is based on STM32F102/STM32F103 MCU or
# MH2103 MCU. Depends on it use default MCU = STM32F103CB
# make -f Makefile.STM32F10x program
# or specify MCU:
# make -f Makefile.STM32F10x program MCU=MH2103ACB
#
# optional:
# make -f Makefile.STM32F10x lock
#
# Unlock and erase device
# make -f Makefile.STM32F10x unlock

# (You may have to ground the reset pin (by shorting pin 7 and 8)
#
# After locking/unlocking, a power cycle is required for the new setting to
# take effect
#

# Default is STM32F103CB, but if your MCU is STM32F102CB, you may have a
# problem with the fact that it runs at 72MHz, but the manufacturer allows
# only 48MHz. In that case below enable STM32F102CB.
# The MH2103ACB is running at 96 MHz - this is STM32F103CB clone.
# select MCU here or on comand line (according to the example given above)

#MCU = STM32F102CB
#MCU = STM32F103CB
#MCU = MH2103ACB
# untested, it should work on Bluepill where there is only 64kB flash

# Some of the Bluepill boards are equipped with CKS32F103C8T6 processor,
# this is STM32F103C8 clone ..  OPENOCD_LOCAL will need to be adjusted
#
#MCU = STM32F103C8
#
##########################################################################

MCU ?= STM32F103CB
MCU_IDENT = none

ifeq ($(MCU),STM32F103C8)
	MCU_FREQ= 72
	MCU_RAM= 20
        MCU_MAX_CODE_SIZE=36k
	MCU_FLASH= 64
	MCU_FLASHB= 65536
	MCU_RAM= 20480
	MCU_IDENT= __STM32F103C8__
	MCU_FLASH_MAP_BASE= 0x08009000
	MCU_FLASH_MAP_PAGE_COUNT= 2
	MCU_FLASH_BASE= 0x08009800
	MCU_FLASH_PAGE_COUNT= 26
	OPENOCD_LOCAL=
endif
ifeq ($(MCU),STM32F103CB)
	MCU_FREQ= 72
	MCU_RAM= 20
        MCU_MAX_CODE_SIZE=36k
	MCU_FLASH= 128
	MCU_FLASHB= 131072
	MCU_RAM= 20480
	MCU_IDENT= __STM32F103CB__
	MCU_FLASH_MAP_BASE= 0x0800e800
	MCU_FLASH_MAP_PAGE_COUNT= 4
	MCU_FLASH_BASE= 0x0800f800
	MCU_FLASH_PAGE_COUNT= 66
	OPENOCD_LOCAL=
endif
ifeq ($(MCU),STM32F102CB)
	MCU_FREQ= 48
	MCU_RAM= 16
        MCU_MAX_CODE_SIZE=36k
	MCU_FLASH= 128
	MCU_FLASHB= 131072
	MCU_RAM= 16384
	MCU_IDENT = __STM32F102CB__
	MCU_FLASH_MAP_BASE= 0x0800e800
	MCU_FLASH_MAP_PAGE_COUNT= 4
	MCU_FLASH_BASE= 0x0800f800
	MCU_FLASH_PAGE_COUNT= 66
	OPENOCD_LOCAL=
endif
ifeq ($(MCU),MH2103ACB)
	MCU_FREQ= 96
	MCU_RAM= 20
        MCU_MAX_CODE_SIZE=36k
	MCU_FLASH= 128
	MCU_FLASHB= 131072
	MCU_RAM= 20480
	MCU_IDENT = _MH2103ACB__
	MCU_FLASH_MAP_BASE= 0x0800e800
	MCU_FLASH_MAP_PAGE_COUNT= 4
	MCU_FLASH_BASE= 0x0800f800
	MCU_FLASH_PAGE_COUNT= 66
	OPENOCD_LOCAL="-c set CPUTAPID 0x2ba01477"
endif

ifeq ($(MCU_IDENT),none)
$(error Unknown MCU [${MCU_IDENT}])
endif
#########################################################################
ARMGNU = arm-none-eabi
MCU_SPEC  = cortex-m3

CC =arm-none-eabi-gcc
AS =arm-none-eabi-as
LD =arm-none-eabi-ld
OC =arm-none-eabi-objcopy
OD =arm-none-eabi-objdump
OS =arm-none-eabi-size

ASFLAGS += -c
ASFLAGS += -Os
ASFLAGS += -mcpu=$(MCU_SPEC)
ASFLAGS += -mthumb
ASFLAGS += -Wall
ASFLAGS += -fmessage-length=0

CFLAGS += -mcpu=$(MCU_SPEC)
CFLAGS += -D$(MCU_IDENT)
CFLAGS += -mthumb
CFLAGS += -Wall
CFLAGS += -g
CFLAGS += -Os
CFLAGS += -ffreestanding -fno-unwind-tables -fno-exceptions  -nostdlib -nostartfiles

CFLAGS += -fmessage-length=0
CFLAGS += -ffunction-sections
#LDFLAGS += -mcpu=$(MCU_SPEC)
#LDFLAGS += -mthumb
#LDFLAGS += -Wall
CFLAGS += --specs=nosys.specs
#LDFLAGS += -nostdlib
#LDFLAGS += -lgcc
#LDFLAGS += -mapcs-frame

LDFLAGS  = -Wl,-gc-sections
LDFLAGS += -Xlinker --defsym=CFG_CODE_SIZE=$(MCU_MAX_CODE_SIZE)
LDFLAGS += -Xlinker --defsym=CFG_RAM_SIZE=$(MCU_RAM)

TARGET = targets/STM32F102/
BUILD = build/STM32F102/

#CFLAGS += -DSERIAL_DEBUG

# precalculate inverse P and Q into key file
CFLAGS += -DUSE_P_Q_INV

# exponent blinding is not enabled, STM32F10x seemt to be insecure device
# (locked flash is readable.. https://gitlab.zapb.de/zapb/stm32f1-firmware-extractor)
#CFLAGS += -DRSA_EXP_BLINDING

# enable protection for single error in CRT
CFLAGS += -DPREVENT_CRT_SINGLE_ERROR

# MyEID does not support 56 bit des version, OsEID allow this if needed
#CFLAGS += -DENABLE_DES56

CFLAGS += -DOsEID
CFLAGS += -DPROTOCOL_T0 -DPROTOCOL_T1
CFLAGS += -DTRANSMISSION_PROTOCOL_MODE_NEGOTIABLE
CFLAGS += -DT1_TRANSPORT
CFLAGS += -DT1_IFS=254

CFLAGS += -DFLASH_BASE=$(MCU_FLASH_BASE)
CFLAGS += -DFLASH_PAGE_COUNT=$(MCU_FLASH_PAGE_COUNT)
CFLAGS += -DFLASH_MAP_BASE=$(MCU_FLASH_MAP_BASE)
CFLAGS += -DFLASH_MAP_PAGE_COUNT=$(MCU_FLASH_MAP_PAGE_COUNT)
CFLAGS += -DCORE_FREQ=$(MCU_FREQ)

HAVE =          -DRSA_BYTES=128
HAVE +=         -DE_BITS=5
HAVE +=         -DSEC_MEM_SIZE=1024

# Use the unique serial number of the device to derive the reader serial number and the card serial number
HAVE +=		-DHW_SERIAL_ID
HAVE +=		-DHW_SERIAL_NUMBER
HAVE +=		-DHAVE_RSA_SQUARE_384
HAVE +=		-DHAVE_RSA_SQUARE_256
HAVE +=		-DHAVE_RSA_SQUARE_192

# ECC size (in bytes 24,32,48,72)
CFLAGS += -DMP_BYTES=72


all:	$(BUILD)/card.bin

.PHONY: all

$(BUILD)usb_common.o:	$(TARGET)usb_common.c $(TARGET)usb.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)usb_common.o $(TARGET)usb_common.c -I$(TARGET) -I card_os

$(BUILD)ccid.o:	$(TARGET)ccid.c card_os/card_io.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)ccid.o $(TARGET)ccid.c -I$(TARGET) -I card_os

$(BUILD)flash_cow_dev.o:	$(TARGET)flash_cow_dev.c $(TARGET)flash_cow_dev.h $(TARGET)STM32F10x_flash.device.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)flash_cow_dev.o $(TARGET)flash_cow_dev.c -I$(TARGET)

$(BUILD)STM32F10x_flash.device.o:	$(TARGET)STM32F10x_flash.device.c $(TARGET)STM32F10x_flash.device.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)STM32F10x_flash.device.o $(TARGET)STM32F10x_flash.device.c -I$(TARGET)

$(BUILD)mem_device.o:	$(TARGET)mem_device.c card_os/mem_device.h $(TARGET)flash_cow_dev.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mem_device.o $(TARGET)mem_device.c -I$(TARGET) -I card_os

$(BUILD)rnd.o:	$(TARGET)rnd.c card_os/rnd.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)rnd.o $(TARGET)rnd.c -I$(TARGET) -I card_os

$(BUILD)serial_debug.o:	$(TARGET)serial_debug.c $(TARGET)serial_debug.h
		$(CC) $(CFLAGS) -c -o $(BUILD)serial_debug.o $(TARGET)serial_debug.c

$(BUILD)bn_lib_arm_cm3.o:	lib/ARM/bn_lib_arm_cm3.c card_os/bn_lib.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)bn_lib_arm_cm3.o lib/ARM/bn_lib_arm_cm3.c -I card_os


TARGET_SPEC +=  $(BUILD)usb_common.o
TARGET_SPEC +=  $(BUILD)ccid.o
TARGET_SPEC +=  $(BUILD)flash_cow_dev.o
TARGET_SPEC +=  $(BUILD)STM32F10x_flash.device.o
TARGET_SPEC +=  $(BUILD)mem_device.o
TARGET_SPEC +=  $(BUILD)rnd.o
TARGET_SPEC +=  $(BUILD)serial_debug.o
TARGET_SPEC +=  $(BUILD)bn_lib_arm_cm3.o

#-------------------------------------------------------------------
# card_os files
#-------------------------------------------------------------------
COMMON_TARGETS= $(BUILD)iso7816.o $(BUILD)myeid_emu.o $(BUILD)fs.o $(BUILD)ec.o $(BUILD)rsa.o $(BUILD)card.o $(BUILD)constants.o $(BUILD)aes.o $(BUILD)des.o $(BUILD)bn_lib.o

$(BUILD)iso7816.o:	card_os/iso7816.c
	$(CC) $(CFLAGS) $(HAVE) -o $(BUILD)iso7816.o -c card_os/iso7816.c -Icard_os

$(BUILD)myeid_emu.o:	card_os/myeid_emu.c
	$(CC) $(CFLAGS) $(HAVE) -o $(BUILD)myeid_emu.o -c card_os/myeid_emu.c -Icard_os

$(BUILD)fs.o:	card_os/fs.c
	$(CC) $(CFLAGS) $(HAVE) -o $(BUILD)fs.o -c card_os/fs.c -Icard_os

$(BUILD)ec.o:	card_os/ec.c
	$(CC) $(CFLAGS) $(HAVE) -o $(BUILD)ec.o -c card_os/ec.c -Icard_os

$(BUILD)rsa.o:	card_os/rsa.c card_os/rsa.h
	$(CC) $(CFLAGS) $(HAVE) -o $(BUILD)rsa.o -c card_os/rsa.c -Icard_os

$(BUILD)aes.o:	card_os/aes.c card_os/aes.h
	$(CC) $(CFLAGS) $(HAVE) -o $(BUILD)aes.o -c card_os/aes.c -Icard_os

$(BUILD)des.o:	card_os/des.c card_os/des.h
	$(CC) $(CFLAGS) $(HAVE) -o $(BUILD)des.o -c card_os/des.c -Icard_os

$(BUILD)card.o:	card_os/card.c
	$(CC) $(CFLAGS) -o $(BUILD)card.o -c card_os/card.c -Icard_os

$(BUILD)bn_lib.o:	card_os/bn_lib.h lib/generic/bn_lib.c
	$(CC) $(CFLAGS) $(HAVE) -o $(BUILD)bn_lib.o -c lib/generic/bn_lib.c -Icard_os

$(BUILD)constants.o:	$(TARGET)constants.c
	$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)constants.o $(TARGET)constants.c -Icard_os


builddir:
	@rm -rf $(BUILD)
	@mkdir -p $(BUILD)


$(BUILD)/card.elf:	builddir $(TARGET)/STM32F10x_init.S $(TARGET)/STM32F10x_dev_init.c $(COMMON_TARGETS) $(TARGET_SPEC)
	$(CC) $(CFLAGS) $(HAVE) -I. $(TARGET)/STM32F10x_dev_init.c -c -o $(BUILD)/STM32F10x_dev_init.o
	$(CC) $(CFLAGS) $(LDFLAGS) -x assembler-with-cpp -T$(TARGET)/STM32F10X.ld $(TARGET)/STM32F10x_init.S -c -o $(BUILD)/STM32F10x_init.o
	$(CC) $(LDFLAGS) -T$(TARGET)/STM32F10X.ld $(BUILD)/STM32F10x_dev_init.o $(BUILD)/STM32F10x_init.o  $(TARGET_SPEC) $(COMMON_TARGETS) -o $(BUILD)/card.elf
	$(OS) $(BUILD)/card.elf


$(BUILD)/card.bin:	$(BUILD)/card.elf
	$(OC) -S -O binary $(BUILD)/card.elf $(BUILD)/card.bin

program:	$(BUILD)/card.bin
	openocd $(OPENOCD_LOCAL) -f interface/stlink.cfg -f target/stm32f1x.cfg -c init -c "reset halt" -c "flash write_image erase $(BUILD)/card.bin 0x08000000 bin" -c "reset" -c "shutdown"

read:
	openocd $(OPENOCD_LOCAL) -f interface/stlink.cfg -f target/stm32f1x.cfg -c init -c "reset halt" -c "flash read_bank 0 STM32F10x_flash_read.bin 0 $(MCU_FLASHB)"  -c "reset" -c "shutdown"

unlock:
	openocd $(OPENOCD_LOCAL) -f interface/stlink.cfg -f target/stm32f1x.cfg -c init -c "reset halt" -c "stm32f1x unlock 0" -c "reset halt" -c "stm32f1x mass_erase 0" -c "reset" -c "shutdown"

lock:
	openocd $(OPENOCD_LOCAL) -f interface/stlink.cfg -f target/stm32f1x.cfg -c init -c "reset halt" -c "stm32f1x lock 0" -c "reset halt" -c "reset" -c "shutdown"

readoptions:
	openocd $(OPENOCD_LOCAL) -f interface/stlink.cfg -f target/stm32f1x.cfg  -c init -c "reset halt" -c "stm32f1x options_read 0" -c "reset" -c "shutdown"


# option byte register = 0x3fffc3c
# write protection register = 0xffffffff
# read protection: off
# watchdog: software
# stop mode: no reset generated upon entry
# standby mode: no reset generated upon entry
# user data = 0xffff


clean:
	rm -f $(BUILD)/*
